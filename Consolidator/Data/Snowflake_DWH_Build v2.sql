USE DATABASE WHOLESALE_DEV;
---------------------------------------------------------------------------------------------------------------
USERDB_ETL_CONFIDENTIAL
---------------------------------------------------------------------------------------------------------------

USE SCHEMA USERDB_ETL_CONFIDENTIAL;

--step 1 create json staging table
CREATE OR REPLACE TABLE  GCS_INSTANTANEOUS_JSON_STG 
(JSON_GCS_DATA VARIANT,
S3_GCS_FILE_NAME VARCHAR(150),
DWH_CREATION_TIME TIMESTAMP_LTZ,
DWH_CREATION_USER  VARCHAR(50),
DWH_LOAD_UUID varchar()
); 

--step 2 create task T1_READ_S3_NONPROD_GCS_BKT
CREATE OR REPLACE task T1_READ_S3_NONPROD_GCS_BKT
WAREHOUSE = ADHOC_DEV
SCHEDULE = '1 MINUTE'
AS
COPY INTO
	 GCS_INSTANTANEOUS_JSON_STG 
FROM
(SELECT $1, metadata$filename, CURRENT_TIMESTAMP, 'T1_READ_S3_NONPROD_GCS_BKT', uuid_string() FROM @raw_dev.PUBLIC.datalake_np_landing_zone_stage/wholesale/snowflake-validate/)
file_format = (TYPE = JSON) FORCE = TRUE 
    on_error='skip_file_100';
   
 
--step 3 create iso staging table   
CREATE  OR REPLACE TABLE  GCS_INSTANTANEOUS_ISO_STG
(
isoCodeName VARCHAR(20),
frequencyHZ NUMBER(38,2),
totalDeployedERSMW   NUMBER(38,2),
totalDeployedLoadRRSMW   NUMBER(38,2),
totalGenerationMW   NUMBER(38,2),
totalLoadMW   NUMBER(38,2),
totalOnlineHASLMW   NUMBER(38,2),
totalOnlineLASLMW   NUMBER(38,2),
totalRealTimeOfflineReservesMW   NUMBER(38,2),
totalRealTimeOnlineReservesMW   NUMBER(38,2),
totalSolarMW   NUMBER(38,2),
totalSumRUCAndRMRUnitsLDLMW   NUMBER(38,2),
totalWindMW   NUMBER(38,2),
timeOfLastSCEDFromMidnightSecs  NUMBER(38,0),
onlineReliabilityDeploymentPriceAdder  NUMBER(38,2),
onlineReservesPriceAdder  NUMBER(38,2),
offlineReservesPriceAdder  NUMBER(38,2),
regulationMW  NUMBER(38,2),
nonUnitSettlementPointsName VARCHAR(50),
locationalMarginalPrice NUMBER(38,2),
SOURCE_SNAPSHOT_TIMESTAMP TIMESTAMP_NTZ,
SOURCE_CREATED_TIMESTAMP TIMESTAMP_NTZ,
SOURCE_DESCRIPTION VARCHAR(100),
DWH_CREATION_TIME TIMESTAMP_NTZ,
DWH_CREATION_USER  VARCHAR(50),
DWH_LOAD_UUID VARCHAR(36)
  ); 

 --step 4 create stream GCS_INSTANTANEOUS_ISO_STG_CHG
 CREATE OR REPLACE stream  CS_INSTANTANEOUS_ISO_STG_CHG 
 ON TABLE  GCS_INSTANTANEOUS_ISO_STG;
 
--step 5 create task T2_FLATTEN_ISO_JSON
 CREATE OR REPLACE task  T2_FLATTEN_ISO_JSON
  WAREHOUSE = ADHOC_DEV 
  AFTER   T1_READ_S3_NONPROD_GCS_BKT
  AS 
  insert into  GCS_INSTANTANEOUS_ISO_STG
select 
value:isoCodeName::string isoCodeName,
try_to_number(value:frequencyHZ::string,38,2) frequencyHZ,
try_to_number(value:totalDeployedERSMW::string,38,2) totalDeployedERSMW,
try_to_number(value:totalDeployedLoadRRSMW::string,38,2) totalDeployedLoadRRSMW,
try_to_number(value:totalGenerationMW::string,38,2) totalGenerationMW,
try_to_number(value:totalLoadMW::string,38,2) totalLoadMW,
try_to_number(value:totalOnlineHASLMW::string,38,2) totalOnlineHASLMW,
try_to_number(value:totalOnlineLASLMW::string,38,2) totalOnlineLASLMW,
try_to_number(value:totalRealTimeOfflineReservesMW::string,38,2) totalRealTimeOfflineReservesMW,
try_to_number(value:totalRealTimeOnlineReservesMW::string,38,2) totalRealTimeOnlineReservesMW,
try_to_number(value:totalSolarMW::string,38,2) totalSolarMW,
try_to_number(value:totalSumRUCAndRMRUnitsLDLMW::string,38,2) totalSumRUCAndRMRUnitsLDLMW,
try_to_number(value:totalWindMW::string,38,2) totalWindMW,
try_to_number(value:timeOfLastSCEDFromMidnightSecs::string ,38,0)timeOfLastSCEDFromMidnightSecs,
try_to_number(value:onlineReliabilityDeploymentPriceAdder::string,38,2) onlineReliabilityDeploymentPriceAdder,
try_to_number(value:onlineReservesPriceAdder::string,38,2) onlineReservesPriceAdder,
try_to_number(value:offlineReservesPriceAdder::string,38,2) offlineReservesPriceAdder,
try_to_number(value:regulationMW::string,38,2) regulationMW,
null as NONUNITSETTLEMENT ,null as LOCATIONALMARGINAL ,
json_gcs_data:snapshotTimestamp::Timestamp snapshotTimestamp,
json_gcs_data:createdTimestamp::Timestamp createdTimestamp,
json_gcs_data:description::String description,
current_timestamp()::timestamp_ntz DWH_CREATION_TIME,
'T2_FLATTEN_ISO_JSON' DWH_CREATION_USER,
DWH_LOAD_UUID
FROM  GCS_INSTANTANEOUS_JSON_STG
, lateral flatten( input => json_gcs_data:isos );

--step 6 create unit staging table
 CREATE OR REPLACE TABLE  GCS_INSTANTANEOUS_UNIT_STG (
unitType  VARCHAR(50), 
unitShortName 	VARCHAR(50), 
unitIdentifier VARCHAR(50), 
siteCode      VARCHAR(20),
combinedCycleConfiguration   VARCHAR(50),
adjustedBasePointRampedMW  NUMBER(38,2),
adjustedNetMW  NUMBER(38,2),
ecoMaxOrHSL  NUMBER(38,2),
ecoMinOrLSL  NUMBER(38,2),
grossMW  NUMBER(38,2),
highTelemeteredLimitMW  NUMBER(38,2),
lowTelemeteredLimitMW  NUMBER(38,2),
mktSetPointMW  NUMBER(38,2),
netMW  NUMBER(38,2),
nsrsResponsibilityMW  NUMBER(38,2),
nsrsScheduleMW  NUMBER(38,2),
regulationResponsibilityMW  NUMBER(38,2),
regDownResponsibilityMW  NUMBER(38,2),
regScheduleMW  NUMBER(38,2),
regUpResponsibilityMW  NUMBER(38,2),
rrsResponsibilityMW  NUMBER(38,2),
rrsScheduleMW  NUMBER(38,2),
updatedDesiredBasePointMW  NUMBER(38,2),
agcStatus  BOOLEAN,
avrStatus  BOOLEAN, 
breakerStatus  BOOLEAN, 
curtailedStatus  BOOLEAN,
ductBurnerStatus  BOOLEAN,
evaporatorStatus    BOOLEAN,
isoResourceStatus  BOOLEAN,
locationalMarginalPrice BOOLEAN,
mitigatedOfferCurveStatus BOOLEAN,
onlineStatus  BOOLEAN, 
pssStatus  BOOLEAN,
quickStartStatus BOOLEAN,
ufrStatus  BOOLEAN,
regDownParticipationFactor  NUMBER(38,0),
regUpParticipationFactor  NUMBER(38,0),
tier2ResponsiveReserveMW  NUMBER(38,2),
SOURCE_SNAPSHOT_TIMESTAMP TIMESTAMP_NTZ,
SOURCE_CREATED_TIMESTAMP TIMESTAMP_NTZ,
SOURCE_DESCRIPTION VARCHAR(100),
DWH_CREATION_TIME TIMESTAMP_NTZ,
DWH_CREATION_USER  VARCHAR(50),
DWH_LOAD_UUID VARCHAR(36)
);

--step 7 create stream  GCS_INSTANTANEOUS_UNIT_STG_CHG
CREATE OR REPLACE stream GCS_INSTANTANEOUS_UNIT_STG_CHG 
 ON TABLE GCS_INSTANTANEOUS_UNIT_STG;

--step 8 create task T3_FLATTEN_UNIT_JSON
CREATE OR REPLACE TASK T3_FLATTEN_UNIT_JSON
  WAREHOUSE = ADHOC_DEV 
  AFTER  T2_FLATTEN_ISO_JSON
  AS  INSERT INTO  GCS_INSTANTANEOUS_UNIT_STG 
(adjustedBasePointRampedMW,
adjustedNetMW,
agcStatus,
avrStatus,
breakerStatus,
combinedCycleConfiguration,
curtailedStatus,
ductBurnerStatus,
ecoMaxOrHSL,
ecoMinOrLSL,
evaporatorStatus,
grossMW,
highTelemeteredLimitMW,
isoResourceStatus,
lowTelemeteredLimitMW,
mktSetPointMW,
netMW,
nsrsResponsibilityMW,
nsrsScheduleMW,
onlineStatus,
pssStatus,
regDownParticipationFactor,
regDownResponsibilityMW,
regScheduleMW,
regulationResponsibilityMW,
regUpParticipationFactor,
regUpResponsibilityMW,
rrsResponsibilityMW,
rrsScheduleMW,
siteCode,
tier2ResponsiveReserveMW,
ufrStatus,
unitShortName,
unitType,
updatedDesiredBasePointMW,
unitidentifier,
mitigatedOfferCurveStatus,
quickStartStatus,
locationalMarginalPrice,
SOURCE_SNAPSHOT_TIMESTAMP ,
SOURCE_CREATED_TIMESTAMP ,
SOURCE_DESCRIPTION,
DWH_CREATION_TIME ,
DWH_CREATION_USER  ,DWH_LOAD_UUID
) 
select 
try_to_number(value:adjustedBasePointRampedMW::string,38,2) adjustedBasePointRampedMW,
try_to_number(value:adjustedNetMW::string,38,2) adjustedNetMW,
nvl(try_to_number(value:agcStatus::STRING,38,0),0) agcStatus,
nvl(try_to_number(value:avrStatus::string,38,0),0) avrStatus,
nvl(try_to_number(value:breakerStatus::string,38,0),0) breakerStatus,
try_to_number(value:combinedCycleConfiguration::string,38,2) combinedCycleConfiguration,
nvl(try_to_number(value:curtailedStatus::string,38,0),0) curtailedStatus,
nvl(try_to_number(value:ductBurnerStatus::string,38,0),0) ductBurnerStatus,
try_to_number(value:ecoMaxOrHSL::string,38,2) ecoMaxOrHSL,
try_to_number(value:ecoMinOrLSL::string,38,2) ecoMinOrLSL,
nvl(try_to_number(value:evaporatorStatus::string,38,0),0) evaporatorStatus,
try_to_number(value:grossMW::string,38,2) grossMW,
try_to_number(value:highTelemeteredLimitMW::string,38,2) highTelemeteredLimitMW,
nvl(try_to_number(value:isoResourceStatus::string,38,0),0) isoResourceStatus,
try_to_number(value:lowTelemeteredLimitMW::string,38,2) lowTelemeteredLimitMW,
try_to_number(value:mktSetPointMW::string,38,2) mktSetPointMW,
try_to_number(value:netMW::string,38,2) netMW,
try_to_number(value:nsrsResponsibilityMW::string,38,2) nsrsResponsibilityMW,
try_to_number(value:nsrsScheduleMW::string,38,2) nsrsScheduleMW,
nvl(try_to_number(value:onlineStatus::string,38,0),0) onlineStatus,
nvl(try_to_number(value:pssStatus::string,38,0),0) pssStatus,
try_to_number(value:regDownParticipationFactor::string,38,2) regDownParticipationFactor,
try_to_number(value:regDownResponsibilityMW::string,38,2) regDownResponsibilityMW,
try_to_number(value:regScheduleMW::string,38,2) regScheduleMW,
try_to_number(value:regulationResponsibilityMW::string,38,2) regulationResponsibilityMW,
try_to_number(value:regUpParticipationFactor::string,38,2) regUpParticipationFactor,
try_to_number(value:regUpResponsibilityMW::string,38,2) regUpResponsibilityMW,
try_to_number(value:rrsResponsibilityMW::string,38,2) rrsResponsibilityMW,
try_to_number(value:rrsScheduleMW::string,38,2) rrsScheduleMW,
value:siteCode::string  siteCode,
try_to_number(value:tier2ResponsiveReserveMW::string,38,2) tier2ResponsiveReserveMW,
nvl(try_to_number(value:ufrStatus::string,38,0),0) ufrStatus,
value:unitShortName::string unitShortName,
value:unitType::string unitType,
try_to_number(value:updatedDesiredBasePointMW::string,38,2) updatedDesiredBasePointMW,
value:unitIdentifier::string unitIdentifier,
nvl(try_to_number(value:mitigatedOfferCurveStatus::STRING,38,0),0)   mitigatedOfferCurveStatus,
nvl(try_to_number(value:quickStartStatus::string,38,0),0) quickStartStatus,
try_to_number(value:locationalMarginalPrice::string,38,2) locationalMarginalPrice, 
json_gcs_data:snapshotTimestamp::TIMESTAMP_NTZ SOURCE_SNAPSHOT_TIMESTAMP,
json_gcs_data:createdTimestamp::TIMESTAMP_NTZ SOURCE_CREATED_TIMESTAMP,
json_gcs_data:description::STRING SOURCE_DESCRIPTION,
current_timestamp()::timestamp_ntz DWH_CREATION_TIME,
'T3_FLATTEN_UNIT_JSON' DWH_CREATION_USER,
 DWH_LOAD_UUID 
 FROM  WHOLESALE_DEV.USERDB_ETL_CONFIDENTIAL.GCS_INSTANTANEOUS_JSON_STG
, lateral flatten( input => json_gcs_data:units ); 

---------------------------------------------------------------------------------------------------------------
TXN_CONFIDENTIAL
---------------------------------------------------------------------------------------------------------------

USE SCHEMA TXN_CONFIDENTIAL;

--step 9 create table GENERATION_LOAD_GCS_TELEMETRY_MASTER
CREATE OR REPLACE TABLE GENERATION_LOAD_GCS_TELEMETRY_MASTER
(
GENERATION_LOAD_KEY NUMBER (38,0),
REPORT_DATE_KEY NUMBER(38,0),
DELIVERY_DATE_KEY  NUMBER(38,0),
INTERVAL_TYPE_KEY NUMBER(38,0),
INTERVAL_KEY	NUMBER(38,0),
SITE_KEY	NUMBER(38,0),
ISO_KEY NUMBER(38,0),
UNIT_KEY	NUMBER(38,0),
UNIT_TYPE_KEY	NUMBER(38,0),
UNIT_ISO_KEY	NUMBER(38,0),
UNIT_STATUS_TYPE_KEY NUMBER(38,0),
PRIMARY_FUELTYPE_KEY	NUMBER(38,0),                        
SECONDARY_FUELTYPE_KEY	NUMBER(38,0)  ,                     
SOURCE_SYSTEM_KEY NUMBER(38,0),
SITE_SHORTNAME     VARCHAR(20),
SITE_LOCAL_TIMEZONE VARCHAR(30),
LOAD_ZONE	VARCHAR(500),
ISO_SHORTNAME VARCHAR(20),
UNIT_SHORTNAME	VARCHAR(50), --GEN VS 
UNIT_IDENTIFIER VARCHAR(50),
UNIT_MODE_TYPE VARCHAR(50),                  
UNITTYPE_SHORTNAME	VARCHAR(20),
UNITSTATUSTYPE_LONGNAME VARCHAR(100),
MARKET_SHARE_PERCENT NUMBER(28,3),
INTERVALTYPE_LONGNAME VARCHAR(100),
INTERVALTYPE_SHORTNAME VARCHAR(20),
INTERVAL_HE_TIMESTAMP TIME,
INTERVAL_HE_TIMESTAMP_UTC TIME,
INTERVAL_SHORTNAME	VARCHAR(20),
FREQ_HZ NUMBER(38,2),
TOTAL_DEPLOYED_ERS_MW  NUMBER(38,2),
TOTAL_DEPLOYED_LOAD_RRS_MW  NUMBER(38,2),
TOTAL_GENERATION_MW  NUMBER(38,2),
TOTAL_LOAD_MW  NUMBER(38,2),
TOTAL_ONLINE_HASL_MW  NUMBER(38,2),
TOTAL_ONLINE_LASL_MW  NUMBER(38,2),
TOTAL_RT_OFFLINE_RESERVES_MW  NUMBER(38,2),
TOTAL_RT_ONLINE_RESERVES_MW  NUMBER(38,2),
TOTAL_SOLAR_MW  NUMBER(38,2),
TOTAL_SUM_RUC_RMR_UNITS_LDL_MW  NUMBER(38,2),
TOTAL_WIND_MW  NUMBER(38,2),
TIME_OF_LAST_SCED_FROM_MID_SECS  NUMBER(38,0),
ONLINE_RELIABILITY_DEPLOYMENT_PRICE_ADDER  NUMBER(38,2),
ONLINE_RESERVES_PRICE_ADDER  NUMBER(38,2),
OFFLINE_RESERVES_PRICE_ADDER  NUMBER(38,2),
REGULATION_MW  NUMBER(38,2),
COMBINED_CYCLE_CONFIGURATION  VARCHAR(50),
ADJUSTED_BASE_POINT_RAMPED_MW NUMBER(38,2),
ADJUSTED_NET_MW NUMBER(38,2),
ECO_MAX_MW NUMBER(38,2),
ECO_MIN_MW NUMBER(38,2),
GROSS_MW NUMBER(38,2),
HIGH_TELEMETERED_LIMIT_MW NUMBER(38,2),
LOW_TELEMETERED_LIMIT_MW NUMBER(38,2),
MARKET_SET_POINT_MW NUMBER(38,2),
NET_MW NUMBER(38,2),
NSRS_RESPONSIBILITY_MW NUMBER(38,2),
NSRS_SCHEDULE_MW NUMBER(38,2),
REGULATION_RESPONSIBILITY_MW NUMBER(38,2),
REG_DOWN_RESPONSIBILITY_MW NUMBER(38,2),
REG_SCHEDULE_MW NUMBER(38,2),
REG_UP_RESPONSIBILITY_MW NUMBER(38,2),
RRS_RESPONSIBILITY_MW NUMBER(38,2),
RRS_SCHEDULE_MW NUMBER(38,2),
UPDATED_DESIRED_BASE_POINT_MW NUMBER(38,2),
ACG_STATUS BOOLEAN,
AVR_STATUS BOOLEAN, 
BREAKER_STATUS BOOLEAN, 
CURTAILED_STATUS BOOLEAN,
DUCT_BURNER_STATUS BOOLEAN,
EVAPORATOR_STATUS   BOOLEAN,
ISO_RESOURCE_STATUS BOOLEAN,
MITIGATED_OFFER_CURVE_STATUS BOOLEAN,
ONLINE_STATUS BOOLEAN, 
PSS_STATUS BOOLEAN,
QUICK_START_STATUS BOOLEAN,
UFR_STATUS BOOLEAN,
REG_DOWN_PARTICIPATION_FACTOR NUMBER(38,0),
REG_UP_PARTICIPATION_FACTOR NUMBER(38,0),
TIER2_RESPONSIVE_RESERVE_MW NUMBER(38,2),
SOURCE_SNAPSHOT_TIMESTAMP TIMESTAMP_NTZ,
SOURCE_CREATED_TIMESTAMP TIMESTAMP_NTZ,
DWH_CREATION_TIME TIMESTAMP_NTZ,
DWH_CREATION_USER  VARCHAR(50),
DWH_UPDATE_TIME TIMESTAMP_NTZ,
DWH_UPDATE_USER VARCHAR(50),
CURRENT_IND VARCHAR(1) DEFAULT  'N',
ACTIVE_FLAG VARCHAR(1)
);  

-- step 10 create task 

CREATE OR REPLACE TASK USERDB_ETL_CONFIDENTIAL.T4_GENERATION_LOAD_GCS_TELEMETRY_MASTER
  WAREHOUSE = ADHOC_DEV 
--  AFTER  T3_FLATTEN_UNIT_JSON
  AS 
MERGE INTO TXN_CONFIDENTIAL.GENERATION_LOAD_GCS_TELEMETRY_MASTER M
USING (SELECT 
snap_date.DATE_PKEY||it.INTERVAL_TYPE_KEY||i.INTERVAL_KEY GENERATION_LOAD_KEY,
create_date.DATE_PKEY REPORT_DATE_KEY,
snap_date.DATE_PKEY DELIVERY_DATE_KEY,
nvl(it.INTERVAL_TYPE_KEY,0) INTERVAL_TYPE_KEY, 
nvl(i.INTERVAL_KEY,0) INTERVAL_KEY,
NVL(S.SITE_KEY,0) SITE_KEY,
NVL(ISO.ISO_KEY,0) ISO_KEY,
nvl(u.UNIT_KEY,0) UNIT_KEY,
NVL(UT.UNIT_TYPE_KEY,0) UNIT_TYPE_KEY,
NVL(UI.UNIT_ISO_KEY,0) UNIT_ISO_KEY,
NVL(US.UNIT_STATUS_TYPE_KEY,0) UNIT_STATUS_TYPE_KEY,
NVL(pf.FUEL_TYPE_KEY,0)  PRIMARY_FUELTYPE_KEY,
NVL(sf.FUEL_TYPE_KEY,0)  SECONDARY_FUELTYPE_KEY,
0 SOURCE_SYSTEM_KEY,
NVL(S.SITE_SHORTNAME,NULL) SITE_SHORTNAME, 
NVL(LTZ.LOCAL_TIMEZONE_SHORTNAME, NULL)  SITE_LOCAL_TIMEZONE,
NVL(S.LOAD_ZONE, NULL) LOAD_ZONE,
NVL(ISO.ISO_SHORTNAME,NULL) ISO_SHORTNAME,
NVL(U.UNIT_SHORTNAME,NULL ) UNIT_SHORTNAME,
GU.UNITIDENTIFIER UNIT_IDENTIFIER,
CASE WHEN GU.UNITTYPE = 'GEN' THEN 'GENERATION' ELSE 'LOAD' END UNIT_MODE_TYPE,
NVL(UT.UNITTYPE_SHORTNAME, NULL ) UNITTYPE_SHORTNAME,
NVL(UST.UNITSTATUSTYPE_LONGNAME, NULL) UNITSTATUSTYPE_LONGNAME,
UI.MARKET_SHARE_PERCENT,
NVL(it.INTERVALTYPE_LONGNAME,NULL) INTERVALTYPE_LONGNAME,
NVL(IT.INTERVALTYPE_SHORTNAME, NULL) INTERVALTYPE_SHORTNAME,
null INTERVAL_HE_TIMESTAMP,
null INTERVAL_HE_TIMESTAMP_UTC,
nvl(i.INTERVAL_SHORTNAME, NULL) INTERVAL_SHORTNAME,
ISTG.FREQUENCYHZ FREQ_HZ,
(istg.TOTALDEPLOYEDERSMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_DEPLOYED_ERS_MW,
(istg.TOTALDEPLOYEDLOADRRSMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_DEPLOYED_LOAD_RRS_MW ,
(istg.TOTALGENERATIONMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_GENERATION_MW ,
(istg.TOTALLOADMW*(ui.MARKET_SHARE_PERCENT/100))   TOTAL_LOAD_MW,
(istg.TOTALONLINEHASLMW*(ui.MARKET_SHARE_PERCENT/100)) TOTAL_ONLINE_HASL_MW ,
(istg.TOTALONLINELASLMW*(ui.MARKET_SHARE_PERCENT/100))   TOTAL_ONLINE_LASL_MW,
(istg.TOTALREALTIMEOFFLINERESERVESMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_RT_OFFLINE_RESERVES_MW ,
(istg.TOTALREALTIMEONLINERESERVESMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_RT_ONLINE_RESERVES_MW ,
(istg.TOTALSOLARMW*(ui.MARKET_SHARE_PERCENT/100)) TOTAL_SOLAR_MW  ,
(istg.TOTALSUMRUCANDRMRUNITSLDLMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_SUM_RUC_RMR_UNITS_LDL_MW ,
(istg.TOTALWINDMW*(ui.MARKET_SHARE_PERCENT/100))  TOTAL_WIND_MW ,
istg.TIMEOFLASTSCEDFROMMIDNIGHTSECS TIME_OF_LAST_SCED_FROM_MID_SECS,
istg.ONLINERELIABILITYDEPLOYMENTPRICEADDER ONLINE_RELIABILITY_DEPLOYMENT_PRICE_ADDER,
istg.ONLINERESERVESPRICEADDER ONLINE_RESERVES_PRICE_ADDER,
istg.OFFLINERESERVESPRICEADDER OFFLINE_RESERVES_PRICE_ADDER,
istg.REGULATIONMW*(ui.MARKET_SHARE_PERCENT/100) REGULATION_MW ,
gu.COMBINEDCYCLECONFIGURATION COMBINED_CYCLE_CONFIGURATION,
gu.ADJUSTEDBASEPOINTRAMPEDMW*(ui.MARKET_SHARE_PERCENT/100)  ADJUSTED_BASE_POINT_RAMPED_MW,
gu.ADJUSTEDNETMW*(ui.MARKET_SHARE_PERCENT/100) ADJUSTED_NET_MW ,
gu.ECOMAXORHSL ECO_MAX_MW,
gu.ECOMINORLSL ECO_MIN_MW,
gu.GROSSMW*(ui.MARKET_SHARE_PERCENT/100)  GROSS_MW,
gu.HIGHTELEMETEREDLIMITMW*(ui.MARKET_SHARE_PERCENT/100) HIGH_TELEMETERED_LIMIT_MW ,
gu.LOWTELEMETEREDLIMITMW*(ui.MARKET_SHARE_PERCENT/100) LOW_TELEMETERED_LIMIT_MW ,
gu.MKTSETPOINTMW*(ui.MARKET_SHARE_PERCENT/100) MARKET_SET_POINT_MW ,
gu.NETMW*(ui.MARKET_SHARE_PERCENT/100)  NET_MW,
gu.NSRSRESPONSIBILITYMW*(ui.MARKET_SHARE_PERCENT/100) NSRS_RESPONSIBILITY_MW ,
gu.NSRSSCHEDULEMW*(ui.MARKET_SHARE_PERCENT/100) NSRS_SCHEDULE_MW ,
gu.REGULATIONRESPONSIBILITYMW*(ui.MARKET_SHARE_PERCENT/100) REGULATION_RESPONSIBILITY_MW ,
gu.REGDOWNRESPONSIBILITYMW*(ui.MARKET_SHARE_PERCENT/100) REG_DOWN_RESPONSIBILITY_MW ,
gu.REGSCHEDULEMW*(ui.MARKET_SHARE_PERCENT/100) REG_SCHEDULE_MW ,
gu.REGUPRESPONSIBILITYMW*(ui.MARKET_SHARE_PERCENT/100) REG_UP_RESPONSIBILITY_MW ,
gu.RRSRESPONSIBILITYMW*(ui.MARKET_SHARE_PERCENT/100) RRS_RESPONSIBILITY_MW ,
gu.RRSSCHEDULEMW*(ui.MARKET_SHARE_PERCENT/100) RRS_SCHEDULE_MW ,
gu.UPDATEDDESIREDBASEPOINTMW*(ui.MARKET_SHARE_PERCENT/100) UPDATED_DESIRED_BASE_POINT_MW  ,
gu.AGCSTATUS ACG_STATUS,
gu.AVRSTATUS AVR_STATUS,
gu.BREAKERSTATUS BREAKER_STATUS,
gu.CURTAILEDSTATUS CURTAILED_STATUS,
gu.DUCTBURNERSTATUS DUCT_BURNER_STATUS,
gu.EVAPORATORSTATUS EVAPORATOR_STATUS,
gu.ISORESOURCESTATUS ISO_RESOURCE_STATUS,
gu.MITIGATEDOFFERCURVESTATUS MITIGATED_OFFER_CURVE_STATUS,
gu.ONLINESTATUS ONLINE_STATUS,
gu.PSSSTATUS PSS_STATUS,
gu.QUICKSTARTSTATUS QUICK_START_STATUS,
gu.UFRSTATUS UFR_STATUS,
gu.REGDOWNPARTICIPATIONFACTOR REG_DOWN_PARTICIPATION_FACTOR,
gu.REGUPPARTICIPATIONFACTOR REG_UP_PARTICIPATION_FACTOR,
gu.TIER2RESPONSIVERESERVEMW TIER2_RESPONSIVE_RESERVE_MW,
gu.SOURCE_SNAPSHOT_TIMESTAMP ,
gu.SOURCE_CREATED_TIMESTAMP,
GU.DWH_CREATION_TIME,
'T4_GENERATION_LOAD_GCS_TELEMETRY_MASTER' DWH_CREATION_USER,
CASE WHEN DATEDIFF(HOUR, gu.SOURCE_SNAPSHOT_TIMESTAMP, CURRENT_TIMESTAMP )>48 THEN 'N' ELSE 'Y' END CURRENT_IND, --if the data is older than 48 hrs, it is not current
'Y' ACTIVE_FLAG,
gu.METADATA$ACTION,
gu.METADATA$ISUPDATE
FROM 
WHOLESALE_DEV.USERDB_ETL_CONFIDENTIAL.GCS_INSTANTANEOUS_UNIT_STG_CHG  gu 
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.UNIT u ON upper(u.UNIT_SHORTNAME) = upper(gu.UNITSHORTNAME)
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.INTERVAL_TYPE it ON upper(substr(gu.SOURCE_DESCRIPTION,1,4)) = it.INTERVALTYPE_SHORTNAME
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL."INTERVAL" i ON it.INTERVAL_TYPE_KEY=i.INTERVAL_TYPE_KEY AND 
DATE_PART(minutes, gu.SOURCE_CREATED_TIMESTAMP) = i.INTERVAL_SEQ
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.SITE S ON UPPER(GU.SITECODE) = UPPER(S.SITE_SHORTNAME)
AND U.SITE_KEY = S.SITE_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.UNIT_ISO UI ON UI.UNIT_KEY = U.UNIT_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.ISO ISO ON UI.ISO_KEY = ISO.ISO_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.UNIT_TYPE UT ON U.UNIT_TYPE_KEY = UT.UNIT_TYPE_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.UNIT_STATUS US ON U.UNIT_KEY = US.UNIT_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.UNIT_STATUS_TYPE UST ON US.UNIT_STATUS_TYPE_KEY=UST.UNIT_STATUS_TYPE_KEY  
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.FUEL_TYPE pf ON u.PRIMARY_FUELTYPE_KEY= pf.FUEL_TYPE_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.FUEL_TYPE sf ON u.SECONDARY_FUELTYPE_KEY = sf.FUEL_TYPE_KEY
LEFT JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL.LOCAL_TIMEZONE LTZ ON S.LOCAL_TIMEZONE_KEY=LTZ.LOCAL_TIMEZONE_KEY
LEFT JOIN WHOLESALE_DEV.USERDB_ETL_CONFIDENTIAL.GCS_INSTANTANEOUS_ISO_STG ISTG ON ISO.ISO_SHORTNAME=ISTG.ISOCODENAME
JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL."DATE" snap_date ON to_date(gu.SOURCE_SNAPSHOT_TIMESTAMP) = snap_date."DATE"
JOIN WHOLESALE_DEV.MASTER_CONFIDENTIAL."DATE" create_date ON to_date(gu.SOURCE_CREATED_TIMESTAMP) = create_date."DATE") uh
ON uh.SOURCE_SNAPSHOT_TIMESTAMP=m.SOURCE_SNAPSHOT_TIMESTAMP
AND uh.REPORT_DATE_KEY =m.REPORT_DATE_KEY AND uh.INTERVAL_TYPE_KEY=m.INTERVAL_TYPE_KEY
AND uh.UNIT_KEY=m.UNIT_KEY
WHEN MATCHED AND uh.METADATA$ACTION='INSERT' AND UH.METADATA$ISUPDATE='TRUE' --update
THEN UPDATE SET M.ACTIVE_FLAG='N' --Indicates that the record has been updated and is no longer active
AND DWH_UPDATE_TIME = current_timestamp::TIMESTAMP_NTZ --stamping the update time or end time
AND DWH_UPDATE_USER = 'T4_GENERATION_LOAD_GCS_TELEMETRY_MASTER' --the name of the process that updated it
WHEN MATCHED   AND uh.METADATA$ACTION='DELETE' AND UH.METADATA$ISUPDATE='FALSE' -- delete
THEN UPDATE SET M.ACTIVE_FLAG='N' --Indicates that the record has been deleted and is no longer active
AND DWH_UPDATE_TIME = current_timestamp::TIMESTAMP_NTZ --stamping the update time or end time
AND DWH_UPDATE_USER = 'T4_GENERATION_LOAD_GCS_TELEMETRY_MASTER' --the name of the process that updated it
WHEN NOT MATCHED  AND uh.METADATA$ACTION='INSERT' AND UH.METADATA$ISUPDATE='FALSE' --insert
THEN 
insert  (GENERATION_LOAD_KEY, REPORT_DATE_KEY, DELIVERY_DATE_KEY, INTERVAL_TYPE_KEY, INTERVAL_KEY, SITE_KEY, ISO_KEY, UNIT_KEY, UNIT_TYPE_KEY, UNIT_ISO_KEY, UNIT_STATUS_TYPE_KEY, PRIMARY_FUELTYPE_KEY, SECONDARY_FUELTYPE_KEY, SOURCE_SYSTEM_KEY, SITE_SHORTNAME, SITE_LOCAL_TIMEZONE, LOAD_ZONE, ISO_SHORTNAME, UNIT_SHORTNAME, UNIT_IDENTIFIER, UNIT_MODE_TYPE, UNITTYPE_SHORTNAME, UNITSTATUSTYPE_LONGNAME, MARKET_SHARE_PERCENT, INTERVALTYPE_LONGNAME, INTERVALTYPE_SHORTNAME, INTERVAL_HE_TIMESTAMP, INTERVAL_HE_TIMESTAMP_UTC, INTERVAL_SHORTNAME, FREQ_HZ, TOTAL_DEPLOYED_ERS_MW, TOTAL_DEPLOYED_LOAD_RRS_MW, TOTAL_GENERATION_MW, TOTAL_LOAD_MW, TOTAL_ONLINE_HASL_MW, TOTAL_ONLINE_LASL_MW, TOTAL_RT_OFFLINE_RESERVES_MW, TOTAL_RT_ONLINE_RESERVES_MW, TOTAL_SOLAR_MW, TOTAL_SUM_RUC_RMR_UNITS_LDL_MW, TOTAL_WIND_MW, TIME_OF_LAST_SCED_FROM_MID_SECS, ONLINE_RELIABILITY_DEPLOYMENT_PRICE_ADDER, ONLINE_RESERVES_PRICE_ADDER, OFFLINE_RESERVES_PRICE_ADDER, REGULATION_MW, COMBINED_CYCLE_CONFIGURATION, ADJUSTED_BASE_POINT_RAMPED_MW, ADJUSTED_NET_MW, ECO_MAX_MW, ECO_MIN_MW, GROSS_MW, HIGH_TELEMETERED_LIMIT_MW, LOW_TELEMETERED_LIMIT_MW, MARKET_SET_POINT_MW, NET_MW, NSRS_RESPONSIBILITY_MW, NSRS_SCHEDULE_MW, REGULATION_RESPONSIBILITY_MW, REG_DOWN_RESPONSIBILITY_MW, REG_SCHEDULE_MW, REG_UP_RESPONSIBILITY_MW, RRS_RESPONSIBILITY_MW, RRS_SCHEDULE_MW, UPDATED_DESIRED_BASE_POINT_MW, ACG_STATUS, AVR_STATUS, BREAKER_STATUS, CURTAILED_STATUS, DUCT_BURNER_STATUS, EVAPORATOR_STATUS, ISO_RESOURCE_STATUS, MITIGATED_OFFER_CURVE_STATUS, ONLINE_STATUS, PSS_STATUS, QUICK_START_STATUS, UFR_STATUS, REG_DOWN_PARTICIPATION_FACTOR, REG_UP_PARTICIPATION_FACTOR, TIER2_RESPONSIVE_RESERVE_MW, SOURCE_SNAPSHOT_TIMESTAMP, SOURCE_CREATED_TIMESTAMP, DWH_CREATION_TIME, DWH_CREATION_USER, CURRENT_IND
)
VALUES (uh.GENERATION_LOAD_KEY, uh.REPORT_DATE_KEY, uh.DELIVERY_DATE_KEY, uh.INTERVAL_TYPE_KEY, uh.INTERVAL_KEY, uh.SITE_KEY, uh.ISO_KEY, uh.UNIT_KEY, uh.UNIT_TYPE_KEY, uh.UNIT_ISO_KEY, uh.UNIT_STATUS_TYPE_KEY, uh.PRIMARY_FUELTYPE_KEY, uh.SECONDARY_FUELTYPE_KEY, uh.SOURCE_SYSTEM_KEY, uh.SITE_SHORTNAME, uh.SITE_LOCAL_TIMEZONE, uh.LOAD_ZONE, uh.ISO_SHORTNAME, uh.UNIT_SHORTNAME, uh.UNIT_IDENTIFIER, uh.UNIT_MODE_TYPE, uh.UNITTYPE_SHORTNAME, uh.UNITSTATUSTYPE_LONGNAME, uh.MARKET_SHARE_PERCENT, uh.INTERVALTYPE_LONGNAME, uh.INTERVALTYPE_SHORTNAME, uh.INTERVAL_HE_TIMESTAMP, uh.INTERVAL_HE_TIMESTAMP_UTC, uh.INTERVAL_SHORTNAME, uh.FREQ_HZ, uh.TOTAL_DEPLOYED_ERS_MW, uh.TOTAL_DEPLOYED_LOAD_RRS_MW, uh.TOTAL_GENERATION_MW, uh.TOTAL_LOAD_MW, uh.TOTAL_ONLINE_HASL_MW, uh.TOTAL_ONLINE_LASL_MW, uh.TOTAL_RT_OFFLINE_RESERVES_MW, uh.TOTAL_RT_ONLINE_RESERVES_MW, uh.TOTAL_SOLAR_MW, uh.TOTAL_SUM_RUC_RMR_UNITS_LDL_MW, uh.TOTAL_WIND_MW, uh.TIME_OF_LAST_SCED_FROM_MID_SECS, uh.ONLINE_RELIABILITY_DEPLOYMENT_PRICE_ADDER, uh.ONLINE_RESERVES_PRICE_ADDER, uh.OFFLINE_RESERVES_PRICE_ADDER, uh.REGULATION_MW, uh.COMBINED_CYCLE_CONFIGURATION, uh.ADJUSTED_BASE_POINT_RAMPED_MW, uh.ADJUSTED_NET_MW, uh.ECO_MAX_MW, uh.ECO_MIN_MW, uh.GROSS_MW, uh.HIGH_TELEMETERED_LIMIT_MW, uh.LOW_TELEMETERED_LIMIT_MW, uh.MARKET_SET_POINT_MW, uh.NET_MW, uh.NSRS_RESPONSIBILITY_MW, uh.NSRS_SCHEDULE_MW, uh.REGULATION_RESPONSIBILITY_MW, uh.REG_DOWN_RESPONSIBILITY_MW, uh.REG_SCHEDULE_MW, uh.REG_UP_RESPONSIBILITY_MW, uh.RRS_RESPONSIBILITY_MW, uh.RRS_SCHEDULE_MW, uh.UPDATED_DESIRED_BASE_POINT_MW, uh.ACG_STATUS, uh.AVR_STATUS, uh.BREAKER_STATUS, uh.CURTAILED_STATUS, uh.DUCT_BURNER_STATUS, uh.EVAPORATOR_STATUS, uh.ISO_RESOURCE_STATUS, uh.MITIGATED_OFFER_CURVE_STATUS, uh.ONLINE_STATUS, uh.PSS_STATUS, uh.QUICK_START_STATUS, uh.UFR_STATUS, uh.REG_DOWN_PARTICIPATION_FACTOR, uh.REG_UP_PARTICIPATION_FACTOR, uh.TIER2_RESPONSIVE_RESERVE_MW, uh.SOURCE_SNAPSHOT_TIMESTAMP, uh.SOURCE_CREATED_TIMESTAMP, uh.DWH_CREATION_TIME, uh.DWH_CREATION_USER, uh.CURRENT_IND);

--step 11 create a task to update current_ind
 CREATE OR REPLACE TASK USERDB_ETL_CONFIDENTIAL.T5_UPDATE_CURRENT_IND
  WAREHOUSE = ADHOC_DEV 
  AFTER  T4_GENERATION_LOAD_GCS_TELEMETRY_MASTER AS
  UPDATE   WHOLESALE_DEV.TXN_CONFIDENTIAL.GENERATION_LOAD_GCS_TELEMETRY_MASTER
SET CURRENT_IND = 'N' WHERE DATEDIFF(HOUR, SOURCE_SNAPSHOT_TIMESTAMP, CURRENT_TIMESTAMP )>48 ;


---step 12 create materialized views and this should be self managed
CREATE OR REPLACE
MATERIALIZED VIEW WHOLESALE_DEV.TXN_CONFIDENTIAL.RPT_ONE_MINUTE_GENERATION_QUADRANTS_MV AS
SELECT
	GCS.REPORT_DATE_KEY,
	GCS.DELIVERY_DATE_KEY,
	GCS.INTERVAL_SHORTNAME AS interval_shortname ,
	GCS.INTERVALTYPE_SHORTNAME AS intervaltype_shortname ,
	GCS.INTERVAL_HE_TIMESTAMP AS interval_he_ts ,
	GCS.SOURCE_SNAPSHOT_TIMESTAMP AS interval_ts ,
	GCS.INTERVAL_HE_TIMESTAMP_UTC AS interval_he_utc_ts ,
	GCS.ISO_SHORTNAME AS iso_shortname ,
	GCS.UNIT_SHORTNAME AS unit_shortname ,
	GCS.UNITTYPE_SHORTNAME AS unittype_shortname ,
	GCS.SITE_SHORTNAME AS unit_site_shortname ,
	GCS.NET_MW AS generation_qty_mw ,
	GCS.MARKET_SHARE_PERCENT AS iso_allocation_pct ,
	GCS.ECO_MIN_MW AS lowSustainableLimitMW ,
	GCS.ECO_MAX_MW AS highSustainableLimitMW ,
	GCS.NSRS_RESPONSIBILITY_MW AS nsrsResponsibilityMW ,
	GCS.NSRS_SCHEDULE_MW AS nsrsScheduleMW ,
	GCS.REG_DOWN_RESPONSIBILITY_MW AS netRegDown ,
	GCS.REG_SCHEDULE_MW AS regScheduleMW ,
	GCS.REG_UP_RESPONSIBILITY_MW AS netRegUp ,
	GCS.RRS_RESPONSIBILITY_MW AS rrsResponsibilityMW ,
	GCS.RRS_SCHEDULE_MW AS rrsScheduleMW ,
	GCS.REGULATION_RESPONSIBILITY_MW AS regulationResponsibilityMW ,
	GCS.TIER2_RESPONSIVE_RESERVE_MW AS tier2ResponsiveReserveMW ,
	CASE WHEN GCS.NET_MW - COALESCE(GCS.ECO_MIN_MW,
	0) < 0 THEN 0
	ELSE GCS.NET_MW - COALESCE(GCS.ECO_MIN_MW,
	0)
END AS generationLessLSLMW ,
COALESCE(GCS.NSRS_RESPONSIBILITY_MW,
0) + COALESCE(GCS.REG_DOWN_RESPONSIBILITY_MW,
0) + COALESCE(GCS.REG_UP_RESPONSIBILITY_MW,
0) + COALESCE(GCS.RRS_RESPONSIBILITY_MW,
0) + COALESCE(GCS.REGULATION_RESPONSIBILITY_MW,
0) + COALESCE(GCS.TIER2_RESPONSIVE_RESERVE_MW,
0) AS totalAcnicllariesMW ,
CASE WHEN COALESCE(GCS.ECO_MAX_MW,
0) - COALESCE(GCS.NET_MW,
0) < 0 THEN 0
ELSE (COALESCE(GCS.ECO_MAX_MW,
0) - COALESCE(GCS.NET_MW,
0))
END AS remainingCapacityMW
FROM
TXN_CONFIDENTIAL.GENERATION_LOAD_GCS_TELEMETRY_MASTER GCS
--WHERE
--GCS.CURRENT_IND = 'Y';


--step 13 create view for load status
CREATE OR REPLACE VIEW WHOLESALE_DEV.USERDB_ETL_CONFIDENTIAL.DWH_LOAD_STATUS AS 
SELECT  
'TASK STATUS' INFO,
TH.DATABASE_NAME, 
TH.SCHEMA_NAME,
TH.NAME TASK_NAME,
LH.TABLE_NAME,
TH.SCHEDULED_TIME,
TH.COMPLETED_TIME,
timediff(seconds, TH.SCHEDULED_TIME,TH.COMPLETED_TIME) AS TIME_IN_SEC,
TH.ERROR_MESSAGE,
TH.STATE STATUS,
LH.FILE_NAME,
LH.ERROR_COUNT
from table(information_schema.task_history()) TH LEFT JOIN INFORMATION_SCHEMA.LOAD_HISTORY LH 
ON LH.LAST_LOAD_TIME > TH.SCHEDULED_TIME AND  LH.LAST_LOAD_TIME < TH.COMPLETED_TIME ORDER BY TH.COMPLETED_TIME DESC;

ALTER task  T1_READ_S3_NONPROD_GCS_BKT RESUME; --Trigger to Start
ALTER task  T2_FLATTEN_ISO_JSON RESUME; 
ALTER task  T3_FLATTEN_UNIT_JSON RESUME; 
ALTER task  T4_GENERATION_LOAD_GCS_TELEMETRY_MASTER RESUME; 
ALTER task  T5_UPDATE_CURRENT_IND RESUME; 

SELECT * FROM WHOLESALE_DEV.USERDB_ETL_CONFIDENTIAL.DWH_LOAD_STATUS;

ALTER task  T1_READ_S3_NONPROD_GCS_BKT suspend; --Trigger to play


-----------------------------------------------------------------------------------------------------

CREATE OR REPLACE  TABLE GENERATION_ISO_NONUNIT_SPP_TELEMETRY_MASTER
(
REPORT_DATE_KEY NUMBER(38,0),
DELIVERY_DATE_KEY NUMBER(38,0),"WHOLESALE_DEV"."MASTER_CONFIDENTIAL"."TIMEZONE"
INTERVAL_TYPE_KEY NUMBER(38,0),
INTERVAL_KEY	NUMBER(38,0),
INTERVAL_SHORTNAME	VARCHAR(20),
ISO_KEY NUMBER(38,0),
SOURCE_SYSTEM_KEY NUMBER(38,0),
ISO_LOCAL_TIMEZONE VARCHAR(30),
NON_UNIT_SETTLEMENT_POINTS_NAME VARCHAR(30),
LOCATIONAL_MARGINAL_PRICE NUMBER(38,2),
SOURCE_SNAPSHOT_TIMESTAMP TIMESTAMP_LTZ,
SOURCE_CREATED_TIMESTAMP TIMESTAMP_LTZ,
DWH_CREATION_TIME TIMESTAMP_NTZ,
DWH_CREATION_USER VARCHAR(50),
DWH_UPDATE_TIME TIMESTAMP_NTZ,
DWH_UPDATE_USER  VARCHAR(50),
CURRENT_IND VARCHAR(1) DEFAULT  'N'
) ;